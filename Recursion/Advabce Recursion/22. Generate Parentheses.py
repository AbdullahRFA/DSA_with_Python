"""
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.



Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]


Constraints:

1 <= n <= 8

"""

"""
âœ… Solution Technique (Balanced Parentheses using Backtracking)
	â€¢	Problem restatement:
Generate all possible balanced parentheses strings of length 2 * n.

â¸»

ðŸ”¹ Key Idea
	â€¢	A balanced parentheses string must always satisfy:
        1.	Never more ')' than '(' at any point.
        2.	Exactly n '(' and n ')' total.
	â€¢	To track balance:
	    â€¢	total = current difference = open count - close count.
        â€¢	If total ever becomes negative â†’ invalid.
        â€¢	If total ever exceeds n â†’ invalid.

â¸»

ðŸ”¹ Recursive Backtracking Steps
	1.	Base Case:
	    â€¢	If we filled all positions (idx == len(bracket))
             â†’ add to result only if total == 0 (balanced).
	2.	Recursive Choices:
        â€¢	Place '(':
        â€¢	Increase total (Sum = total + 1).
        â€¢	Recurse to next position.
        â€¢	Place ')':
        â€¢	Decrease total (Sum = total - 1).
        â€¢	Recurse to next position.
	3.	Pruning (early stopping):
        â€¢	If total > n â†’ too many '(', stop.
        â€¢	If total < 0 â†’ too many ')', stop.

â¸»

ðŸ”¹ Why it works
	â€¢	The recursion explores all possible placements of '(' and ')'.
	â€¢	Pruning ensures only valid partial strings are extended.
	â€¢	At the end, only balanced parentheses strings remain in result.

â¸»

ðŸ”¹ Example Walkthrough (n = 3)
	â€¢	Start: idx=0, total=0
	â€¢	Place '(' â†’ total=1 â†’ continue
	â€¢	Place another '(' â†’ total=2 â†’ continue
	â€¢	Place ')' â†’ total=1 â†’ continue
	â€¢	Eventually: "((()))", "(()())", "(())()", "()(())", "()()()".

â¸»

"""
from  typing import  List
class Solution:
    def Solve(self,idx, total,n, bracket, result):
        if idx>= len(bracket):
            if total == 0:
                result.append(''.join(bracket))
            return
        elif total > len(bracket)//2:
            return
        elif total < 0:
            return

        bracket[idx] = '('
        Sum = total + 1
        self.Solve(idx+1, Sum,n, bracket, result)
        bracket[idx] = ")"
        Sum = total - 1
        self.Solve(idx+1, Sum,n, bracket, result)


    def generateParenthesis(self, n: int) -> List[str]:
        result = []
        bracket = [''] * (n * 2)
        self.Solve(0,0,n,bracket,result)
        return  result

slv = Solution()
n = int(input("Enter the value of 'n' : "))

print(slv.generateParenthesis(n))